#!/usr/bin/python3

import argparse, json, re
from pprint import PrettyPrinter

version = '0.0.4'
data = []
pp = PrettyPrinter(compact=True)

def valid_enode(e):
    try:
        enode = re.match('enode://[a-z0-9]{128}@(?:\d{1,3}\.?){4}:\d+', e).group(0)
        return enode

    except AttributeError:
        msg = 'Value is not a valid enode.'.format(e)
        raise argparse.ArgumentTypeError(msg)


def parse_args():
    # top-level parser
    description = ('Manages static-nodes.json file '
                   'for Stentor Blockchain core-cluster nodes')
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-d', '--data', default="static-nodes.json",
                        help='Specify path to static-nodes.json')
    parser.add_argument('--version', action='version', version='%(prog)s v{}'.format(version))
    subparsers = parser.add_subparsers(help='Commands', dest='command')

    # list parser
    subparsers.add_parser('list', help='List existing enodes', aliases=['ls'])

    # has enode parser
    add_parser = subparsers.add_parser('has', help='Check if enode is static')
    add_parser.add_argument('enode', help='Specify an enode')

    # add enode parser
    add_parser = subparsers.add_parser('add', help='Add an enode')
    add_parser.add_argument('enode', type=valid_enode, help='Specify an enode')

    # remove enode parser
    remove_parser = subparsers.add_parser('remove', help='Remove an enode',
                                          aliases=['rm'])
    remove_parser.add_argument('enode', help='Specify an enode or all',
                               type=lambda e: e if e == 'all' or valid_enode(e) else None)

    args = parser.parse_args()

    if not args.command:
        args.command = 'list'

    return args


def load_data(data_file):
    global data

    try:
        with open(data_file, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        with open(data_file, 'w+') as f:
            f.write(json.dumps(data))


def write_data(data_file):
    with open(data_file, 'w+') as f:
        f.write(json.dumps(data))


def has_enode(enode):
    return valid_enode(enode) and enode in data


def can_add_enode(enode):
    if not has_enode(enode):
        return enode

    raise ValueError('Enode is not a static node.')


def can_remove_enode(enode):
    if has_enode(enode):
        return enode

    raise ValueError('Enode is not a static node.')


def handle_list():
    print('Current enodes:')
    pp.pprint(data)


def handle_add(enode):
    if can_add_enode(enode):
        data.append(enode)
        print()
        handle_list()


def handle_remove(enode):
    if can_remove_enode(enode):
        data.remove(enode)
        print()
        handle_list()


def handle_remove_all():
    global data

    print('Removing {0} entries.\n'.format(len(data)))
    data = []
    handle_list()


def main():
    args = parse_args()

    data_file = args.data
    load_data(data_file)

    if args.command == 'list' or args.command == 'ls':
        handle_list()

    if args.command == 'has':
        print(has_enode(args.enode))

    if args.command == 'add':
        handle_add(args.enode)

    if args.command == 'remove' or args.command == 'rm':
        if args.enode == 'all':
            handle_remove_all()
        else:
            handle_remove(args.enode)

    write_data(data_file)


main()

